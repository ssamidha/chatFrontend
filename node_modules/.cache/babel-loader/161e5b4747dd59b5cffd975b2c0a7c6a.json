{"ast":null,"code":"var _jsxFileName = \"/home/admin1/frontend/src/components/Dashboard.js\";\nimport React, { Component } from \"react\";\nimport \"./Dashboard.css\";\nimport { getAllUser, getAllMessages } from \"../services/userServices\";\nimport socketApi from \"../components/socketApi\";\nimport openSocket from \"socket.io-client\"; // const socket = openSocket(\"http://localhost:7000\");\n\nexport default class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setRedirect = () => {\n      this.setState({\n        redirect: true\n      });\n    };\n\n    this.renderRedirect = () => {\n      if (this.state.redirect) {\n        var path = \"/\";\n        this.props.history.push(path);\n      }\n    };\n\n    this.person = key => {\n      console.log(\"on click\", key);\n      localStorage.setItem(\"receiverName\", key.firstName);\n      localStorage.setItem(\"receiverLastName\", key.lastName);\n      localStorage.setItem(\"receiverid\", key._id);\n      localStorage.setItem(\"receiveremail\", key.email);\n      this.getUserMessages();\n    };\n\n    this.handlechangeall = event => {\n      console.log(\"value in handle change\", event.currentTarget.value);\n      this.setState({\n        msg: event.currentTarget.value\n      }, () => {\n        console.log(\"value after set state in handlechange\", this.state.msg);\n      });\n    };\n\n    this.state = {\n      userArray: [],\n      messageArray: [],\n      redirect: false,\n      msg: \"\"\n    };\n  }\n\n  componentDidMount() {\n    socketApi.socketCon();\n    this.getUser();\n    this.getUserMessages(); //================================================================\n\n    socketApi.receivedMsg((error, result) => {\n      if (result) {\n        console.log(\"result is back...\", result);\n        var resultArray = [];\n        resultArray = this.state.Messages;\n        resultArray.push(result);\n        this.setState({\n          messages: resultArray\n        });\n        console.log(\"Received Messages are---->\", JSON.stringify(this.state.Messages));\n      } else {\n        console.log(\"Error in received message--->\", error);\n      }\n    });\n  }\n\n  getUser() {\n    getAllUser().then(res => {\n      console.log(\" response \", res.data.data);\n      var users = res.data.data;\n      console.log(\"users list\", users);\n      this.setState({\n        userArray: users\n      });\n      console.log(\"in state\", this.state);\n    });\n  }\n\n  getUserMessages() {\n    getAllMessages().then(res => {\n      console.log(\"all messges\", res.data.data);\n      var messages = res.data.data;\n      console.log(\" user messages\", messages);\n      this.setState({\n        messageArray: messages\n      });\n      console.log(\"in message states\", this.state);\n    }).catch(err => {\n      console.log(\" error \", err);\n    });\n  }\n\n  async sendClick(event) {\n    event.preventDefault(); // console.log(\"Receiver data************\"+this.state.ReceiverId+\" \"+this.state.ReceiverName);\n    // console.log(\" this state\",this.msg);\n\n    let sendObject = await {\n      senderID: localStorage.getItem(\"senderId\"),\n      receiverID: localStorage.getItem(\"receiverid\"),\n      message: this.state.msg\n    };\n    console.log(\"sendObject------->\" + JSON.stringify(sendObject));\n    socketApi.Emitfun(sendObject);\n    socketApi.receivedMsg(); // this.getMessages()\n\n    this.getUserMessages(); // To Make input field clear after sending message\n\n    this.setState({\n      msg: \"\"\n    });\n  }\n\n  logOutClick() {\n    localStorage.clear();\n    this.setRedirect();\n  }\n\n  render() {\n    const printuser = this.state.userArray.map(key => {\n      return React.createElement(\"div\", {\n        onClick: () => this.person(key),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, key.firstName);\n    }); // console.log(printuser);\n\n    const Messages = this.state.messageArray.map((msg, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, msg.message);\n    }); // console.log(printuser);\n\n    const Messages1 = this.state.messageArray.map((msg, index) => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, msg.senderID ? React.createElement(\"div\", {\n        className: \"senderMessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"sendermessages\") : null, React.createElement(\"div\", {\n        className: \"receiverMessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"receivermessages\"));\n    });\n    return React.createElement(\"div\", {\n      className: \"mainchatdiv\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"appBar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"p\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, \"Chat Application\"), this.renderRedirect(), React.createElement(\"button\", {\n      className: \"LogOutButton\",\n      onClick: () => this.logOutClick(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, \"Log Out\")), React.createElement(\"div\", {\n      className: \"chatApp\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"list-username\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"users\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Username\"), React.createElement(\"div\", {\n      className: \"List\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"List\", printuser)), React.createElement(\"div\", {\n      className: \"chat-box-width\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"ChatBox\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, Messages), React.createElement(\"div\", {\n      className: \"inputStyle\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"input\",\n      placeholder: \"type here\",\n      value: this.state.msg,\n      onChange: event => {\n        this.handlechangeall(event);\n      },\n      name: \"msg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"sendButton\",\n      onClick: event => {\n        this.sendClick(event);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, \"send\")))));\n  }\n\n}","map":{"version":3,"sources":["/home/admin1/frontend/src/components/Dashboard.js"],"names":["React","Component","getAllUser","getAllMessages","socketApi","openSocket","Dashboard","constructor","props","setRedirect","setState","redirect","renderRedirect","state","path","history","push","person","key","console","log","localStorage","setItem","firstName","lastName","_id","email","getUserMessages","handlechangeall","event","currentTarget","value","msg","userArray","messageArray","componentDidMount","socketCon","getUser","receivedMsg","error","result","resultArray","Messages","messages","JSON","stringify","then","res","data","users","catch","err","sendClick","preventDefault","sendObject","senderID","getItem","receiverID","message","Emitfun","logOutClick","clear","render","printuser","map","index","Messages1"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Dashboard.css\";\nimport { getAllUser, getAllMessages } from \"../services/userServices\";\nimport socketApi from \"../components/socketApi\";\nimport openSocket from \"socket.io-client\";\n\n// const socket = openSocket(\"http://localhost:7000\");\n\nexport default class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userArray: [],\n      messageArray: [],\n      redirect: false,\n      msg: \"\"\n    };\n  }\n\n  setRedirect = () => {\n    this.setState({\n      redirect: true\n    });\n  };\n\n  renderRedirect = () => {\n    if (this.state.redirect) {\n      var path = \"/\";\n      this.props.history.push(path);\n    }\n  };\n\n  \n\n  componentDidMount() {\n    socketApi.socketCon();\n\n    this.getUser();\n    this.getUserMessages();\n\n    //================================================================\n    socketApi.receivedMsg((error, result) => {\n      if (result) {\n        console.log(\"result is back...\", result);\n\n        var resultArray = [];\n\n        resultArray = this.state.Messages;\n\n        resultArray.push(result);\n\n        this.setState({\n          messages: resultArray\n        });\n\n        console.log(\n          \"Received Messages are---->\",\n          JSON.stringify(this.state.Messages)\n        );\n      } else {\n        console.log(\"Error in received message--->\", error);\n      }\n    });\n  }\n\n  getUser() {\n    getAllUser().then(res => {\n      console.log(\" response \", res.data.data);\n      var users = res.data.data;\n      console.log(\"users list\", users);\n      this.setState({ userArray: users });\n      console.log(\"in state\", this.state);\n    });\n  }\n\n  person = key => {\n    console.log(\"on click\", key);\n    localStorage.setItem(\"receiverName\", key.firstName);\n    localStorage.setItem(\"receiverLastName\", key.lastName);\n    localStorage.setItem(\"receiverid\", key._id);\n    localStorage.setItem(\"receiveremail\", key.email);\n    this.getUserMessages();\n  };\n\n  getUserMessages() {\n    getAllMessages()\n      .then(res => {\n        console.log(\"all messges\", res.data.data);\n        var messages = res.data.data;\n        console.log(\" user messages\", messages);\n        this.setState({ messageArray: messages });\n        console.log(\"in message states\", this.state);\n      })\n\n      .catch(err => {\n        console.log(\" error \", err);\n      });\n  }\n\n  \n\n\n  handlechangeall = event => {\n    console.log(\"value in handle change\", event.currentTarget.value);\n\n    this.setState({ msg: event.currentTarget.value }, () => {\n      console.log(\"value after set state in handlechange\", this.state.msg);\n    });\n  };\n\n  async sendClick(event) {\n    event.preventDefault();\n    // console.log(\"Receiver data************\"+this.state.ReceiverId+\" \"+this.state.ReceiverName);\n    // console.log(\" this state\",this.msg);\n\n    let sendObject = await {\n      senderID: localStorage.getItem(\"senderId\"),\n\n      receiverID: localStorage.getItem(\"receiverid\"),\n\n      message: this.state.msg\n    };\n\n    console.log(\"sendObject------->\" + JSON.stringify(sendObject));\n\n    socketApi.Emitfun(sendObject);\n    socketApi.receivedMsg();\n   // this.getMessages()\n    this.getUserMessages();\n\n    // To Make input field clear after sending message\n    this.setState({ msg: \"\" });\n  }\n\n  logOutClick() {\n    localStorage.clear();\n    this.setRedirect();\n  }\n\n  render() {\n    const printuser = this.state.userArray.map(key => {\n      return <div onClick={() => this.person(key)}>{key.firstName}</div>;\n    });\n    // console.log(printuser);\n    const Messages = this.state.messageArray.map((msg, index) => {\n      return <div key={index}>{msg.message}</div>;\n    });\n    \n    // console.log(printuser);\n    const Messages1 = this.state.messageArray.map((msg, index) => {\n      return (<div>\n        {msg.senderID? \n        <div  className=\"senderMessage\">\n        sendermessages\n      </div>\n      :\n      null\n      \n      \n      }\n        \n    \n      <div className=\"receiverMessage\"> \n          receivermessages\n      </div>\n    </div>)\n    });\n\n\n    \n\n    return (\n      <div className=\"mainchatdiv\">\n        <div id=\"appBar\">\n          <p className=\"p\">Chat Application</p>\n          {this.renderRedirect()}\n          <button className=\"LogOutButton\" onClick={() => this.logOutClick()}>\n            Log Out\n          </button>\n        </div>\n        <div className=\"chatApp\">\n          <div className=\"list-username\">\n            <div className=\"users\">Username</div>\n            <div className=\"List\">\n              List\n              {printuser}\n            </div>\n          </div>\n          <div  className=\"chat-box-width\">\n            <div className=\"ChatBox\">\n               {/* chat box */}\n               {Messages}\n             \n              \n            </div>\n            \n            <div className=\"inputStyle\">\n              <input\n                className=\"input\"\n                placeholder=\"type here\"\n                value={this.state.msg}\n                onChange={event => {\n                  this.handlechangeall(event);\n                }}\n                name=\"msg\"\n              ></input>\n\n              <button className=\"sendButton\" onClick={event=>{this.sendClick(event)}}>\n                send\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}